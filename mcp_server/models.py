# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:01:12+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class Type(Enum):
    auLocal = 'auLocal'


class AULocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=5, max_length=9) = Field(
        ..., description='The bank account number, without separators or whitespace.'
    )
    bsbCode: constr(min_length=6, max_length=6) = Field(
        ...,
        description='The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.',
    )
    type: Type = Field(..., description='**auLocal**')


class Type1(Enum):
    gbSortCode = 'gbSortCode'
    usRoutingNumber = 'usRoutingNumber'


class AdditionalBankIdentification(BaseModel):
    code: Optional[str] = Field(
        None, description='The value of the additional bank identification.'
    )
    type: Optional[Type1] = Field(
        None,
        description='The type of additional bank identification, depending on the country.\n\nPossible values:\n\n * **gbSortCode**: The 6-digit [UK sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or spaces\n * **usRoutingNumber**: The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or spaces.',
    )


class Address(BaseModel):
    city: Optional[str] = Field(None, description='The name of the city.')
    country: str = Field(
        ...,
        description="The two-character ISO 3166-1 alpha-2 country code. For example, **US**.\n>If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
    )
    line1: Optional[str] = Field(None, description='First line of the street address.')
    line2: Optional[str] = Field(None, description='Second line of the street address.')
    postalCode: Optional[str] = Field(
        None,
        description='The postal code.\nMaximum length:\n* 5 digits for an address in the US.\n* 10 characters for an address in all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-letter ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.',
    )


class Amount(BaseModel):
    currency: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    value: int = Field(
        ...,
        description='The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )


class AmountAdjustmentType(Enum):
    atmMarkup = 'atmMarkup'
    authHoldReserve = 'authHoldReserve'
    exchange = 'exchange'
    forexMarkup = 'forexMarkup'


class AmountAdjustment(BaseModel):
    amount: Optional[Amount] = Field(None, description='The adjustment amount.')
    amountAdjustmentType: Optional[AmountAdjustmentType] = Field(
        None,
        description='The type of markup that is applied to an authorised payment.\n\nPossible values: **exchange**, **forexMarkup**, **authHoldReserve**, **atmMarkup**.',
    )
    basepoints: Optional[int] = Field(
        None, description='The basepoints associated with the applied markup.'
    )


class Type2(Enum):
    brLocal = 'brLocal'


class BRLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=1, max_length=10) = Field(
        ..., description='The bank account number (without separators or whitespace).'
    )
    bankCode: constr(min_length=3, max_length=3) = Field(
        ..., description='The 3-digit Brazilian bank code (with leading zeros).'
    )
    branchNumber: constr(min_length=1, max_length=4) = Field(
        ...,
        description='The bank account branch number (without separators or whitespace).',
    )
    type: Type2 = Field(..., description='**brLocal**')


class BalanceMutation(BaseModel):
    balance: Optional[int] = Field(
        None,
        description="The amount in the payment's currency that is debited or credited on the balance accounting register.",
    )
    currency: Optional[str] = Field(
        None,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    received: Optional[int] = Field(
        None,
        description="The amount in the payment's currency that is debited or credited on the received accounting register.",
    )
    reserved: Optional[int] = Field(
        None,
        description="The amount in the payment's currency that is debited or credited on the reserved accounting register.",
    )


class BalancePlatformNotificationResponse(BaseModel):
    notificationResponse: Optional[str] = Field(
        None,
        description='Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).',
    )


class AccountType(Enum):
    checking = 'checking'
    savings = 'savings'


class Type3(Enum):
    caLocal = 'caLocal'


class CALocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=5, max_length=12) = Field(
        ...,
        description='The 5- to 12-digit bank account number, without separators or whitespace.',
    )
    accountType: Optional[AccountType] = Field(
        'checking',
        description='The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.',
    )
    institutionNumber: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The 3-digit institution number, without separators or whitespace.',
    )
    transitNumber: constr(min_length=5, max_length=5) = Field(
        ..., description='The 5-digit transit number, without separators or whitespace.'
    )
    type: Type3 = Field(..., description='**caLocal**')


class Type4(Enum):
    czLocal = 'czLocal'


class CZLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=2, max_length=17) = Field(
        ...,
        description='The 2- to 16-digit bank account number (Číslo účtu) in the following format:\n\n- The optional prefix (předčíslí).\n\n- The required second part (základní část) which must be at least two non-zero digits.\n\nExamples:\n\n- **19-123457** (with prefix)\n\n- **123457** (without prefix)\n\n- **000019-0000123457** (with prefix, normalized)\n\n- **000000-0000123457** (without prefix, normalized)',
    )
    bankCode: constr(min_length=4, max_length=4) = Field(
        ...,
        description='The 4-digit bank code (Kód banky), without separators or whitespace.',
    )
    type: Type4 = Field(..., description='**czLocal**')


class Type5(Enum):
    dkLocal = 'dkLocal'


class DKLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=4, max_length=10) = Field(
        ...,
        description='The 4-10 digits bank account number (Kontonummer) (without separators or whitespace).',
    )
    bankCode: constr(min_length=4, max_length=4) = Field(
        ...,
        description='The 4-digit bank code (Registreringsnummer) (without separators or whitespace).',
    )
    type: Type5 = Field(..., description='**dkLocal**')


class Type6(Enum):
    huLocal = 'huLocal'


class HULocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=24, max_length=24) = Field(
        ...,
        description='The 24-digit bank account number, without separators or whitespace.',
    )
    type: Type6 = Field(..., description='**huLocal**')


class Type7(Enum):
    iban = 'iban'


class IbanAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    iban: str = Field(
        ...,
        description='The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.',
    )
    type: Type7 = Field(..., description='**iban**')


class Type8(Enum):
    noLocal = 'noLocal'


class NOLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=11, max_length=11) = Field(
        ...,
        description='The 11-digit bank account number, without separators or whitespace.',
    )
    type: Type8 = Field(..., description='**noLocal**')


class NameLocation(BaseModel):
    city: Optional[str] = Field(
        None, description='The city where the merchant is located.'
    )
    country: Optional[str] = Field(
        None,
        description='The country where the merchant is located in [three-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.',
    )
    countryOfOrigin: Optional[str] = Field(
        None,
        description='The home country in [three-digit country code](https://en.wikipedia.org/wiki/ISO_3166-1_numeric) format, used for government-controlled merchants such as embassies.',
    )
    name: Optional[str] = Field(
        None, description="The name of the merchant's shop or service."
    )
    rawData: Optional[str] = Field(None, description='The raw data.')
    state: Optional[str] = Field(
        None, description='The state where the merchant is located.'
    )


class Type9(Enum):
    numberAndBic = 'numberAndBic'


class NumberAndBicAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(max_length=34) = Field(
        ...,
        description='The bank account number, without separators or whitespace. The length and format depends on the bank or country.',
    )
    additionalBankIdentification: Optional[AdditionalBankIdentification] = Field(
        None,
        description='Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers.',
    )
    bic: constr(min_length=8, max_length=11) = Field(
        ..., description="The bank's 8- or 11-character BIC or SWIFT code."
    )
    type: Type9 = Field(..., description='**numberAndBic**')


class Type10(Enum):
    plLocal = 'plLocal'


class PLLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=26, max_length=26) = Field(
        ...,
        description='The 26-digit bank account number ([Numer rachunku](https://pl.wikipedia.org/wiki/Numer_Rachunku_Bankowego)), without separators or whitespace.',
    )
    type: Type10 = Field(..., description='**plLocal**')


class Type11(Enum):
    individual = 'individual'
    organization = 'organization'
    unknown = 'unknown'


class PartyIdentification(BaseModel):
    address: Optional[Address] = Field(
        None, description='Address of the bank account owner.'
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description='The date of birth of the individual in [ISO-8601](https://www.w3.org/TR/NOTE-datetime) format. For example, **YYYY-MM-DD**.\n\nAllowed only when `type` is **individual**.',
    )
    firstName: Optional[str] = Field(
        None,
        description='First name of the individual.\n\nAllowed only when `type` is **individual**.',
    )
    fullName: str = Field(..., description='The name of the entity.')
    lastName: Optional[str] = Field(
        None,
        description='Last name of the individual.\n\nAllowed only when `type` is **individual**.',
    )
    reference: Optional[str] = Field(
        None,
        description="Your unique reference of the party. This should be consistent for all transfers initiated to/from the same party/counterparty. e.g Your client's unique wallet or payee ID",
    )
    type: Optional[Type11] = Field(
        'unknown',
        description='The type of entity that owns the bank account.\n\n Possible values: **individual**, **organization**, or **unknown**.',
    )


class PaymentInstrument(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the resource.'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )
    reference: Optional[str] = Field(
        None, description='The reference for the resource.'
    )
    tokenType: Optional[str] = Field(
        None, description='The type of wallet the network token is associated with.'
    )


class RelayedAuthorisationData(BaseModel):
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Contains key-value pairs of your references and descriptions, for example, `customId`:`your-own-custom-field-12345`.',
    )
    reference: Optional[str] = Field(
        None, description='Your reference for the relayed authorisation data.'
    )


class Resource(BaseModel):
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')


class ResourceReference(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the resource.'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )
    reference: Optional[str] = Field(
        None, description='The reference for the resource.'
    )


class Type12(Enum):
    seLocal = 'seLocal'


class SELocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=7, max_length=10) = Field(
        ...,
        description='The 7- to 10-digit bank account number ([Bankkontonummer](https://sv.wikipedia.org/wiki/Bankkonto)), without the clearing number, separators, or whitespace.',
    )
    clearingNumber: constr(min_length=4, max_length=5) = Field(
        ...,
        description='The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.',
    )
    type: Type12 = Field(..., description='**seLocal**')


class Type13(Enum):
    sgLocal = 'sgLocal'


class SGLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=4, max_length=19) = Field(
        ...,
        description='The 4- to 19-digit bank account number, without separators or whitespace.',
    )
    bic: constr(min_length=8, max_length=11) = Field(
        ..., description="The bank's 8- or 11-character BIC or SWIFT code."
    )
    type: Optional[Type13] = Field('sgLocal', description='**sgLocal**')


class TransactionRuleReference(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the resource.'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )
    reference: Optional[str] = Field(
        None, description='The reference for the resource.'
    )


class TransactionRuleSource(BaseModel):
    id: Optional[str] = Field(None, description='ID of the resource, when applicable.')
    type: Optional[str] = Field(
        None,
        description='Indicates the type of resource for which the transaction rule is defined.\n\nPossible values:\n\n * **PaymentInstrumentGroup**\n\n* **PaymentInstrument**\n\n* **BalancePlatform**\n\n* **EntityUsageConfiguration**\n\n* **PlatformRule**: The transaction rule is a platform-wide rule imposed by Adyen.',
    )


class Reason(Enum):
    amountLimitExceeded = 'amountLimitExceeded'
    approved = 'approved'
    counterpartyAccountBlocked = 'counterpartyAccountBlocked'
    counterpartyAccountClosed = 'counterpartyAccountClosed'
    counterpartyAccountNotFound = 'counterpartyAccountNotFound'
    counterpartyAddressRequired = 'counterpartyAddressRequired'
    counterpartyBankTimedOut = 'counterpartyBankTimedOut'
    counterpartyBankUnavailable = 'counterpartyBankUnavailable'
    error = 'error'
    notEnoughBalance = 'notEnoughBalance'
    refusedByCounterpartyBank = 'refusedByCounterpartyBank'
    routeNotFound = 'routeNotFound'
    unknown = 'unknown'


class Status(Enum):
    approvalPending = 'approvalPending'
    atmWithdrawal = 'atmWithdrawal'
    atmWithdrawalReversalPending = 'atmWithdrawalReversalPending'
    atmWithdrawalReversed = 'atmWithdrawalReversed'
    authAdjustmentAuthorised = 'authAdjustmentAuthorised'
    authAdjustmentError = 'authAdjustmentError'
    authAdjustmentRefused = 'authAdjustmentRefused'
    authorised = 'authorised'
    bankTransfer = 'bankTransfer'
    bankTransferPending = 'bankTransferPending'
    booked = 'booked'
    bookingPending = 'bookingPending'
    cancelled = 'cancelled'
    capturePending = 'capturePending'
    captureReversalPending = 'captureReversalPending'
    captureReversed = 'captureReversed'
    captured = 'captured'
    chargeback = 'chargeback'
    chargebackPending = 'chargebackPending'
    chargebackReversalPending = 'chargebackReversalPending'
    chargebackReversed = 'chargebackReversed'
    credited = 'credited'
    depositCorrection = 'depositCorrection'
    depositCorrectionPending = 'depositCorrectionPending'
    dispute = 'dispute'
    disputeClosed = 'disputeClosed'
    disputeExpired = 'disputeExpired'
    disputeNeedsReview = 'disputeNeedsReview'
    error = 'error'
    expired = 'expired'
    failed = 'failed'
    fee = 'fee'
    feePending = 'feePending'
    internalTransfer = 'internalTransfer'
    internalTransferPending = 'internalTransferPending'
    invoiceDeduction = 'invoiceDeduction'
    invoiceDeductionPending = 'invoiceDeductionPending'
    manualCorrectionPending = 'manualCorrectionPending'
    manuallyCorrected = 'manuallyCorrected'
    matchedStatement = 'matchedStatement'
    matchedStatementPending = 'matchedStatementPending'
    merchantPayin = 'merchantPayin'
    merchantPayinPending = 'merchantPayinPending'
    merchantPayinReversed = 'merchantPayinReversed'
    merchantPayinReversedPending = 'merchantPayinReversedPending'
    miscCost = 'miscCost'
    miscCostPending = 'miscCostPending'
    paymentCost = 'paymentCost'
    paymentCostPending = 'paymentCostPending'
    received = 'received'
    refundPending = 'refundPending'
    refundReversalPending = 'refundReversalPending'
    refundReversed = 'refundReversed'
    refunded = 'refunded'
    refused = 'refused'
    reserveAdjustment = 'reserveAdjustment'
    reserveAdjustmentPending = 'reserveAdjustmentPending'
    returned = 'returned'
    secondChargeback = 'secondChargeback'
    secondChargebackPending = 'secondChargebackPending'
    undefined = 'undefined'


class Type14(Enum):
    accounting = 'accounting'
    tracking = 'tracking'


class TransferEvent(BaseModel):
    amount: Optional[Amount] = Field(None, description='The original journal amount.')
    amountAdjustments: Optional[List[AmountAdjustment]] = Field(
        None, description='The amount adjustments in this transfer.'
    )
    bookingDate: Optional[datetime] = Field(
        None, description='The date when the transfer request was sent.'
    )
    estimatedArrivalTime: Optional[datetime] = Field(
        None,
        description='The estimated time the beneficiary should have access to the funds.',
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the transfer event.'
    )
    mutations: Optional[List[BalanceMutation]] = Field(
        None, description='The list of the balance mutation per event.'
    )
    originalAmount: Optional[Amount] = Field(
        None, description='The amount in the original currency.'
    )
    reason: Optional[Reason] = Field(
        None, description='The reason for the transfer status.'
    )
    status: Optional[Status] = Field(
        None, description='The status of the transfer event.'
    )
    transactionId: Optional[str] = Field(
        None,
        description='The id of the transaction that is related to this accounting event. Only sent for events of type **accounting** where the balance changes.',
    )
    type: Optional[Type14] = Field(
        None,
        description='The type of the transfer event. Possible values: **accounting**, **tracking**.',
    )
    updateDate: Optional[datetime] = Field(
        None, description='The date when the tracking status was updated.'
    )
    valueDate: Optional[datetime] = Field(
        None,
        description='A future date, when the funds are expected to be deducted from or credited to the balance account.',
    )


class Category(Enum):
    bank = 'bank'
    internal = 'internal'
    issuedCard = 'issuedCard'
    platformPayment = 'platformPayment'


class Direction(Enum):
    incoming = 'incoming'
    outgoing = 'outgoing'


class PanEntryMode(Enum):
    chip = 'chip'
    cof = 'cof'
    contactless = 'contactless'
    ecommerce = 'ecommerce'
    magstripe = 'magstripe'
    manual = 'manual'
    token = 'token'


class Priority(Enum):
    crossBorder = 'crossBorder'
    directDebit = 'directDebit'
    fast = 'fast'
    instant = 'instant'
    internal = 'internal'
    regular = 'regular'
    wire = 'wire'


class ProcessingType(Enum):
    atmWithdraw = 'atmWithdraw'
    balanceInquiry = 'balanceInquiry'
    ecommerce = 'ecommerce'
    moto = 'moto'
    pos = 'pos'
    purchaseWithCashback = 'purchaseWithCashback'
    recurring = 'recurring'
    token = 'token'


class Type15(Enum):
    atmWithdrawal = 'atmWithdrawal'
    atmWithdrawalReversal = 'atmWithdrawalReversal'
    balanceAdjustment = 'balanceAdjustment'
    balanceRollover = 'balanceRollover'
    bankTransfer = 'bankTransfer'
    capture = 'capture'
    captureReversal = 'captureReversal'
    chargeback = 'chargeback'
    chargebackReversal = 'chargebackReversal'
    depositCorrection = 'depositCorrection'
    fee = 'fee'
    grant = 'grant'
    installment = 'installment'
    installmentReversal = 'installmentReversal'
    internalTransfer = 'internalTransfer'
    invoiceDeduction = 'invoiceDeduction'
    leftover = 'leftover'
    manualCorrection = 'manualCorrection'
    miscCost = 'miscCost'
    payment = 'payment'
    paymentCost = 'paymentCost'
    refund = 'refund'
    refundReversal = 'refundReversal'
    repayment = 'repayment'
    reserveAdjustment = 'reserveAdjustment'
    secondChargeback = 'secondChargeback'


class Type16(Enum):
    balancePlatform_transfer_created = 'balancePlatform.transfer.created'
    balancePlatform_transfer_updated = 'balancePlatform.transfer.updated'


class Status2(Enum):
    credited = 'credited'


class TransferNotificationTransferTracking(BaseModel):
    estimatedArrivalTime: Optional[datetime] = Field(
        None,
        description='The estimated time the beneficiary should have access to the funds.',
    )
    status: Optional[Status2] = Field(
        None, description='The tracking status of the transfer.'
    )


class TransferNotificationValidationFact(BaseModel):
    result: Optional[str] = Field(
        None, description='The evaluation result of the validation fact.'
    )
    type: Optional[str] = Field(None, description='The type of the validation fact.')


class Type17(Enum):
    ukLocal = 'ukLocal'


class UKLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=8, max_length=8) = Field(
        ...,
        description='The 8-digit bank account number, without separators or whitespace.',
    )
    sortCode: constr(min_length=6, max_length=6) = Field(
        ...,
        description='The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.',
    )
    type: Type17 = Field(..., description='**ukLocal**')


class Type18(Enum):
    usLocal = 'usLocal'


class USLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=2, max_length=18) = Field(
        ..., description='The bank account number, without separators or whitespace.'
    )
    accountType: Optional[AccountType] = Field(
        'checking',
        description='The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.',
    )
    routingNumber: constr(min_length=9, max_length=9) = Field(
        ...,
        description='The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.',
    )
    type: Type18 = Field(..., description='**usLocal**')


class BankAccountV3(BaseModel):
    accountHolder: PartyIdentification = Field(
        ..., description='Information about the owner of the bank account.'
    )
    accountIdentification: Union[
        AULocalAccountIdentification,
        BRLocalAccountIdentification,
        CALocalAccountIdentification,
        CZLocalAccountIdentification,
        DKLocalAccountIdentification,
        HULocalAccountIdentification,
        IbanAccountIdentification,
        NOLocalAccountIdentification,
        NumberAndBicAccountIdentification,
        PLLocalAccountIdentification,
        SELocalAccountIdentification,
        SGLocalAccountIdentification,
        UKLocalAccountIdentification,
        USLocalAccountIdentification,
    ] = Field(
        ...,
        description='Contains the bank account details. The fields required in this object depend on the country of the bank account and the currency of the transfer.',
    )


class MerchantData(BaseModel):
    mcc: Optional[str] = Field(None, description='The merchant category code.')
    merchantId: Optional[str] = Field(None, description='The merchant identifier.')
    nameLocation: Optional[NameLocation] = Field(
        None, description="Contains the merchant's name and location."
    )
    postalCode: Optional[str] = Field(None, description='The merchant postal code.')


class TransactionEventViolation(BaseModel):
    reason: Optional[str] = Field(
        None, description='An explanation about why the transaction rule failed.'
    )
    transactionRule: Optional[TransactionRuleReference] = Field(
        None, description='Contains information about the transaction rule.'
    )
    transactionRuleSource: Optional[TransactionRuleSource] = Field(
        None,
        description='Contains the type and ID of the resource to which the transaction rule is linked.',
    )


class TransactionRulesResult(BaseModel):
    advice: Optional[str] = Field(
        None, description='The advice given by the Risk analysis.'
    )
    allRulesPassed: Optional[bool] = Field(
        None,
        description='Indicates whether the transaction passed the evaluation for all transaction rules.',
    )
    failedTransactionRules: Optional[List[TransactionEventViolation]] = Field(
        None,
        description='Array containing all the transaction rules that the transaction violated. This list is only sent when `allRulesPassed` is **false**.',
    )
    score: Optional[int] = Field(None, description='The score of the Risk analysis.')


class CounterpartyV3(BaseModel):
    balanceAccountId: Optional[str] = Field(
        None,
        description='Unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).',
    )
    bankAccount: Optional[BankAccountV3] = Field(
        None, description='Contains information about the bank account.'
    )
    merchant: Optional[MerchantData] = Field(
        None, description='Contains information about the merchant.'
    )
    transferInstrumentId: Optional[str] = Field(
        None,
        description='Unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).',
    )


class TransferNotificationData(BaseModel):
    accountHolder: Optional[ResourceReference] = Field(
        None,
        description='The account holder associated with the balance account used in the transfer.',
    )
    amount: Amount = Field(..., description='The amount of the transfer.')
    balanceAccount: Optional[ResourceReference] = Field(
        None,
        description='Contains information about the balance account involved in the transfer.',
    )
    balanceAccountId: Optional[str] = Field(
        None,
        description='The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).',
    )
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    balances: Optional[List[BalanceMutation]] = Field(
        None, description='The list of the latest balance statuses in the transfer.'
    )
    category: Category = Field(
        ...,
        description='The type of transfer.\n\nPossible values:\n\n - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.\n\n- **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.\n\n- **issuedCard**: Transfer initiated by a Adyen-issued card.\n\n- **platformPayment**: Fund movements related to payments that are acquired for your users.',
    )
    counterparty: Optional[CounterpartyV3] = Field(
        None, description='The other party in the transfer.'
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    description: Optional[str] = Field(
        None,
        description='Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.\n\nSupported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , \' + Space**\n\nSupported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ \' " ! ?**',
    )
    direction: Optional[Direction] = Field(
        None,
        description='The direction of the transfer.\n\nPossible values: **incoming**, **outgoing**.',
    )
    events: Optional[List[TransferEvent]] = Field(
        None,
        description='The list of events leading up to the current status of the transfer.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')
    modificationMerchantReference: Optional[str] = Field(
        None, description="The capture's merchant reference included in the transfer."
    )
    modificationPspReference: Optional[str] = Field(
        None, description='The capture reference included in the transfer.'
    )
    panEntryMode: Optional[PanEntryMode] = Field(
        None,
        description='Indicates the method used for entering the PAN to initiate a transaction.\n\nPossible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.',
    )
    paymentInstrument: Optional[PaymentInstrument] = Field(
        None,
        description='Contains information about the payment instrument used in the transfer.',
    )
    paymentInstrumentId: Optional[str] = Field(
        None,
        description='The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.',
    )
    paymentMerchantReference: Optional[str] = Field(
        None, description="The payment's merchant reference included in the transfer."
    )
    priority: Optional[Priority] = Field(
        None,
        description='The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.\n\nPossible values:\n\n* **regular**: For normal, low-value transactions.\n\n* **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.\n\n* **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.\n\n* **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).\n\n* **crossBorder**: High-value transfer to a recipient in a different country.\n\n* **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).',
    )
    processingType: Optional[ProcessingType] = Field(
        None,
        description='Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.',
    )
    pspPaymentReference: Optional[str] = Field(
        None, description='The payment reference included in the transfer.'
    )
    reason: Optional[Reason] = Field(
        None, description='Additional information about the status of the transfer.'
    )
    reference: Optional[constr(max_length=80)] = Field(
        None,
        description="Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.",
    )
    referenceForBeneficiary: Optional[constr(max_length=80)] = Field(
        None,
        description=' A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.\n\n Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.\n\n- **internal**: 80 characters\n\n- **bank**: 35 characters when transferring to an IBAN, 15 characters for others.',
    )
    relayedAuthorisationData: Optional[RelayedAuthorisationData] = Field(
        None,
        description='If you are using relayed authorisation, this object contains information from the relayed authorisation response from your server.',
    )
    sequenceNumber: Optional[int] = Field(
        None,
        description='The sequence number of the transfer notification. The numbers start from 1 and increase with each new notification for a specific transfer.\n\nIt can help you restore the correct sequence of events even if they arrive out of order.',
    )
    status: Status = Field(
        ...,
        description='The result of the transfer.\n\n For example, **authorised**, **refused**, or **error**.',
    )
    tracking: Optional[TransferNotificationTransferTracking] = Field(
        None, description='The tracking information for the transfer.'
    )
    transactionId: Optional[str] = Field(
        None,
        description='The ID of the transaction that is created based on the transfer.',
    )
    transactionRulesResult: Optional[TransactionRulesResult] = Field(
        None,
        description='Contains the results of the evaluation of the transaction rules.',
    )
    type: Optional[Type15] = Field(
        None,
        description='The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.',
    )
    validationFacts: Optional[List[TransferNotificationValidationFact]] = Field(
        None,
        description='The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.',
    )


class TransferNotificationRequest(BaseModel):
    data: TransferNotificationData = Field(
        ..., description='Contains details about the event.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Optional[Type16] = Field(None, description='The type of the notification.')
